// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet/v1/pet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pet_2fv1_2fpet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pet_2fv1_2fpet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/type/datetime.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pet_2fv1_2fpet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pet_2fv1_2fpet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pet_2fv1_2fpet_2eproto;
namespace pet {
namespace v1 {
class DeletePetRequest;
struct DeletePetRequestDefaultTypeInternal;
extern DeletePetRequestDefaultTypeInternal _DeletePetRequest_default_instance_;
class DeletePetResponse;
struct DeletePetResponseDefaultTypeInternal;
extern DeletePetResponseDefaultTypeInternal _DeletePetResponse_default_instance_;
class GetPetRequest;
struct GetPetRequestDefaultTypeInternal;
extern GetPetRequestDefaultTypeInternal _GetPetRequest_default_instance_;
class GetPetResponse;
struct GetPetResponseDefaultTypeInternal;
extern GetPetResponseDefaultTypeInternal _GetPetResponse_default_instance_;
class Pet;
struct PetDefaultTypeInternal;
extern PetDefaultTypeInternal _Pet_default_instance_;
class PutPetRequest;
struct PutPetRequestDefaultTypeInternal;
extern PutPetRequestDefaultTypeInternal _PutPetRequest_default_instance_;
class PutPetResponse;
struct PutPetResponseDefaultTypeInternal;
extern PutPetResponseDefaultTypeInternal _PutPetResponse_default_instance_;
}  // namespace v1
}  // namespace pet
PROTOBUF_NAMESPACE_OPEN
template<> ::pet::v1::DeletePetRequest* Arena::CreateMaybeMessage<::pet::v1::DeletePetRequest>(Arena*);
template<> ::pet::v1::DeletePetResponse* Arena::CreateMaybeMessage<::pet::v1::DeletePetResponse>(Arena*);
template<> ::pet::v1::GetPetRequest* Arena::CreateMaybeMessage<::pet::v1::GetPetRequest>(Arena*);
template<> ::pet::v1::GetPetResponse* Arena::CreateMaybeMessage<::pet::v1::GetPetResponse>(Arena*);
template<> ::pet::v1::Pet* Arena::CreateMaybeMessage<::pet::v1::Pet>(Arena*);
template<> ::pet::v1::PutPetRequest* Arena::CreateMaybeMessage<::pet::v1::PutPetRequest>(Arena*);
template<> ::pet::v1::PutPetResponse* Arena::CreateMaybeMessage<::pet::v1::PutPetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pet {
namespace v1 {

enum PetType : int {
  PET_TYPE_UNSPECIFIED = 0,
  PET_TYPE_CAT = 1,
  PET_TYPE_DOG = 2,
  PET_TYPE_SNAKE = 3,
  PET_TYPE_HAMSTER = 4,
  PetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PetType_IsValid(int value);
constexpr PetType PetType_MIN = PET_TYPE_UNSPECIFIED;
constexpr PetType PetType_MAX = PET_TYPE_HAMSTER;
constexpr int PetType_ARRAYSIZE = PetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PetType_descriptor();
template<typename T>
inline const std::string& PetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PetType_descriptor(), enum_t_value);
}
inline bool PetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PetType>(
    PetType_descriptor(), name, value);
}
// ===================================================================

class Pet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.Pet) */ {
 public:
  inline Pet() : Pet(nullptr) {}
  ~Pet() override;
  explicit constexpr Pet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pet(const Pet& from);
  Pet(Pet&& from) noexcept
    : Pet() {
    *this = ::std::move(from);
  }

  inline Pet& operator=(const Pet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pet& operator=(Pet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pet* internal_default_instance() {
    return reinterpret_cast<const Pet*>(
               &_Pet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pet& a, Pet& b) {
    a.Swap(&b);
  }
  inline void Swap(Pet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pet* New() const final {
    return new Pet();
  }

  Pet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.Pet";
  }
  protected:
  explicit Pet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kPetTypeFieldNumber = 1,
  };
  // string pet_id = 2 [json_name = "petId"];
  void clear_pet_id();
  const std::string& pet_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pet_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pet_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pet_id();
  void set_allocated_pet_id(std::string* pet_id);
  private:
  const std::string& _internal_pet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pet_id(const std::string& value);
  std::string* _internal_mutable_pet_id();
  public:

  // string name = 3 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.type.DateTime created_at = 4 [json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::google::type::DateTime& created_at() const;
  PROTOBUF_MUST_USE_RESULT ::google::type::DateTime* release_created_at();
  ::google::type::DateTime* mutable_created_at();
  void set_allocated_created_at(::google::type::DateTime* created_at);
  private:
  const ::google::type::DateTime& _internal_created_at() const;
  ::google::type::DateTime* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::google::type::DateTime* created_at);
  ::google::type::DateTime* unsafe_arena_release_created_at();

  // .pet.v1.PetType pet_type = 1 [json_name = "petType"];
  void clear_pet_type();
  ::pet::v1::PetType pet_type() const;
  void set_pet_type(::pet::v1::PetType value);
  private:
  ::pet::v1::PetType _internal_pet_type() const;
  void _internal_set_pet_type(::pet::v1::PetType value);
  public:

  // @@protoc_insertion_point(class_scope:pet.v1.Pet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pet_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::type::DateTime* created_at_;
  int pet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// -------------------------------------------------------------------

class GetPetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.GetPetRequest) */ {
 public:
  inline GetPetRequest() : GetPetRequest(nullptr) {}
  ~GetPetRequest() override;
  explicit constexpr GetPetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPetRequest(const GetPetRequest& from);
  GetPetRequest(GetPetRequest&& from) noexcept
    : GetPetRequest() {
    *this = ::std::move(from);
  }

  inline GetPetRequest& operator=(const GetPetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPetRequest& operator=(GetPetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPetRequest* internal_default_instance() {
    return reinterpret_cast<const GetPetRequest*>(
               &_GetPetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPetRequest& a, GetPetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPetRequest* New() const final {
    return new GetPetRequest();
  }

  GetPetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.GetPetRequest";
  }
  protected:
  explicit GetPetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetIdFieldNumber = 1,
  };
  // string pet_id = 1 [json_name = "petId"];
  void clear_pet_id();
  const std::string& pet_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pet_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pet_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pet_id();
  void set_allocated_pet_id(std::string* pet_id);
  private:
  const std::string& _internal_pet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pet_id(const std::string& value);
  std::string* _internal_mutable_pet_id();
  public:

  // @@protoc_insertion_point(class_scope:pet.v1.GetPetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pet_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// -------------------------------------------------------------------

class GetPetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.GetPetResponse) */ {
 public:
  inline GetPetResponse() : GetPetResponse(nullptr) {}
  ~GetPetResponse() override;
  explicit constexpr GetPetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPetResponse(const GetPetResponse& from);
  GetPetResponse(GetPetResponse&& from) noexcept
    : GetPetResponse() {
    *this = ::std::move(from);
  }

  inline GetPetResponse& operator=(const GetPetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPetResponse& operator=(GetPetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPetResponse* internal_default_instance() {
    return reinterpret_cast<const GetPetResponse*>(
               &_GetPetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPetResponse& a, GetPetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPetResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPetResponse* New() const final {
    return new GetPetResponse();
  }

  GetPetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.GetPetResponse";
  }
  protected:
  explicit GetPetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetFieldNumber = 1,
  };
  // .pet.v1.Pet pet = 1 [json_name = "pet"];
  bool has_pet() const;
  private:
  bool _internal_has_pet() const;
  public:
  void clear_pet();
  const ::pet::v1::Pet& pet() const;
  PROTOBUF_MUST_USE_RESULT ::pet::v1::Pet* release_pet();
  ::pet::v1::Pet* mutable_pet();
  void set_allocated_pet(::pet::v1::Pet* pet);
  private:
  const ::pet::v1::Pet& _internal_pet() const;
  ::pet::v1::Pet* _internal_mutable_pet();
  public:
  void unsafe_arena_set_allocated_pet(
      ::pet::v1::Pet* pet);
  ::pet::v1::Pet* unsafe_arena_release_pet();

  // @@protoc_insertion_point(class_scope:pet.v1.GetPetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pet::v1::Pet* pet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// -------------------------------------------------------------------

class PutPetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.PutPetRequest) */ {
 public:
  inline PutPetRequest() : PutPetRequest(nullptr) {}
  ~PutPetRequest() override;
  explicit constexpr PutPetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutPetRequest(const PutPetRequest& from);
  PutPetRequest(PutPetRequest&& from) noexcept
    : PutPetRequest() {
    *this = ::std::move(from);
  }

  inline PutPetRequest& operator=(const PutPetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutPetRequest& operator=(PutPetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutPetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutPetRequest* internal_default_instance() {
    return reinterpret_cast<const PutPetRequest*>(
               &_PutPetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutPetRequest& a, PutPetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutPetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutPetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutPetRequest* New() const final {
    return new PutPetRequest();
  }

  PutPetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutPetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutPetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutPetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutPetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.PutPetRequest";
  }
  protected:
  explicit PutPetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPetTypeFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pet.v1.PetType pet_type = 1 [json_name = "petType"];
  void clear_pet_type();
  ::pet::v1::PetType pet_type() const;
  void set_pet_type(::pet::v1::PetType value);
  private:
  ::pet::v1::PetType _internal_pet_type() const;
  void _internal_set_pet_type(::pet::v1::PetType value);
  public:

  // @@protoc_insertion_point(class_scope:pet.v1.PutPetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int pet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// -------------------------------------------------------------------

class PutPetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.PutPetResponse) */ {
 public:
  inline PutPetResponse() : PutPetResponse(nullptr) {}
  ~PutPetResponse() override;
  explicit constexpr PutPetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutPetResponse(const PutPetResponse& from);
  PutPetResponse(PutPetResponse&& from) noexcept
    : PutPetResponse() {
    *this = ::std::move(from);
  }

  inline PutPetResponse& operator=(const PutPetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutPetResponse& operator=(PutPetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutPetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutPetResponse* internal_default_instance() {
    return reinterpret_cast<const PutPetResponse*>(
               &_PutPetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutPetResponse& a, PutPetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutPetResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutPetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutPetResponse* New() const final {
    return new PutPetResponse();
  }

  PutPetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutPetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutPetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutPetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutPetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.PutPetResponse";
  }
  protected:
  explicit PutPetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetFieldNumber = 1,
  };
  // .pet.v1.Pet pet = 1 [json_name = "pet"];
  bool has_pet() const;
  private:
  bool _internal_has_pet() const;
  public:
  void clear_pet();
  const ::pet::v1::Pet& pet() const;
  PROTOBUF_MUST_USE_RESULT ::pet::v1::Pet* release_pet();
  ::pet::v1::Pet* mutable_pet();
  void set_allocated_pet(::pet::v1::Pet* pet);
  private:
  const ::pet::v1::Pet& _internal_pet() const;
  ::pet::v1::Pet* _internal_mutable_pet();
  public:
  void unsafe_arena_set_allocated_pet(
      ::pet::v1::Pet* pet);
  ::pet::v1::Pet* unsafe_arena_release_pet();

  // @@protoc_insertion_point(class_scope:pet.v1.PutPetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pet::v1::Pet* pet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// -------------------------------------------------------------------

class DeletePetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.DeletePetRequest) */ {
 public:
  inline DeletePetRequest() : DeletePetRequest(nullptr) {}
  ~DeletePetRequest() override;
  explicit constexpr DeletePetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePetRequest(const DeletePetRequest& from);
  DeletePetRequest(DeletePetRequest&& from) noexcept
    : DeletePetRequest() {
    *this = ::std::move(from);
  }

  inline DeletePetRequest& operator=(const DeletePetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePetRequest& operator=(DeletePetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePetRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePetRequest*>(
               &_DeletePetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeletePetRequest& a, DeletePetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePetRequest* New() const final {
    return new DeletePetRequest();
  }

  DeletePetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.DeletePetRequest";
  }
  protected:
  explicit DeletePetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetIdFieldNumber = 1,
  };
  // string pet_id = 1 [json_name = "petId"];
  void clear_pet_id();
  const std::string& pet_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pet_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pet_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pet_id();
  void set_allocated_pet_id(std::string* pet_id);
  private:
  const std::string& _internal_pet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pet_id(const std::string& value);
  std::string* _internal_mutable_pet_id();
  public:

  // @@protoc_insertion_point(class_scope:pet.v1.DeletePetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pet_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// -------------------------------------------------------------------

class DeletePetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pet.v1.DeletePetResponse) */ {
 public:
  inline DeletePetResponse() : DeletePetResponse(nullptr) {}
  ~DeletePetResponse() override;
  explicit constexpr DeletePetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePetResponse(const DeletePetResponse& from);
  DeletePetResponse(DeletePetResponse&& from) noexcept
    : DeletePetResponse() {
    *this = ::std::move(from);
  }

  inline DeletePetResponse& operator=(const DeletePetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePetResponse& operator=(DeletePetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePetResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePetResponse*>(
               &_DeletePetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeletePetResponse& a, DeletePetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePetResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePetResponse* New() const final {
    return new DeletePetResponse();
  }

  DeletePetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pet.v1.DeletePetResponse";
  }
  protected:
  explicit DeletePetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pet.v1.DeletePetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2fv1_2fpet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pet

// .pet.v1.PetType pet_type = 1 [json_name = "petType"];
inline void Pet::clear_pet_type() {
  pet_type_ = 0;
}
inline ::pet::v1::PetType Pet::_internal_pet_type() const {
  return static_cast< ::pet::v1::PetType >(pet_type_);
}
inline ::pet::v1::PetType Pet::pet_type() const {
  // @@protoc_insertion_point(field_get:pet.v1.Pet.pet_type)
  return _internal_pet_type();
}
inline void Pet::_internal_set_pet_type(::pet::v1::PetType value) {
  
  pet_type_ = value;
}
inline void Pet::set_pet_type(::pet::v1::PetType value) {
  _internal_set_pet_type(value);
  // @@protoc_insertion_point(field_set:pet.v1.Pet.pet_type)
}

// string pet_id = 2 [json_name = "petId"];
inline void Pet::clear_pet_id() {
  pet_id_.ClearToEmpty();
}
inline const std::string& Pet::pet_id() const {
  // @@protoc_insertion_point(field_get:pet.v1.Pet.pet_id)
  return _internal_pet_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pet::set_pet_id(ArgT0&& arg0, ArgT... args) {
 
 pet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pet.v1.Pet.pet_id)
}
inline std::string* Pet::mutable_pet_id() {
  std::string* _s = _internal_mutable_pet_id();
  // @@protoc_insertion_point(field_mutable:pet.v1.Pet.pet_id)
  return _s;
}
inline const std::string& Pet::_internal_pet_id() const {
  return pet_id_.Get();
}
inline void Pet::_internal_set_pet_id(const std::string& value) {
  
  pet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pet::_internal_mutable_pet_id() {
  
  return pet_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pet::release_pet_id() {
  // @@protoc_insertion_point(field_release:pet.v1.Pet.pet_id)
  return pet_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pet::set_allocated_pet_id(std::string* pet_id) {
  if (pet_id != nullptr) {
    
  } else {
    
  }
  pet_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pet_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pet.v1.Pet.pet_id)
}

// string name = 3 [json_name = "name"];
inline void Pet::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Pet::name() const {
  // @@protoc_insertion_point(field_get:pet.v1.Pet.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pet::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pet.v1.Pet.name)
}
inline std::string* Pet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pet.v1.Pet.name)
  return _s;
}
inline const std::string& Pet::_internal_name() const {
  return name_.Get();
}
inline void Pet::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pet::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pet::release_name() {
  // @@protoc_insertion_point(field_release:pet.v1.Pet.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pet.v1.Pet.name)
}

// .google.type.DateTime created_at = 4 [json_name = "createdAt"];
inline bool Pet::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Pet::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::google::type::DateTime& Pet::_internal_created_at() const {
  const ::google::type::DateTime* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::DateTime&>(
      ::google::type::_DateTime_default_instance_);
}
inline const ::google::type::DateTime& Pet::created_at() const {
  // @@protoc_insertion_point(field_get:pet.v1.Pet.created_at)
  return _internal_created_at();
}
inline void Pet::unsafe_arena_set_allocated_created_at(
    ::google::type::DateTime* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pet.v1.Pet.created_at)
}
inline ::google::type::DateTime* Pet::release_created_at() {
  
  ::google::type::DateTime* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::DateTime* Pet::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:pet.v1.Pet.created_at)
  
  ::google::type::DateTime* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::google::type::DateTime* Pet::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::DateTime>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::google::type::DateTime* Pet::mutable_created_at() {
  ::google::type::DateTime* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:pet.v1.Pet.created_at)
  return _msg;
}
inline void Pet::set_allocated_created_at(::google::type::DateTime* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:pet.v1.Pet.created_at)
}

// -------------------------------------------------------------------

// GetPetRequest

// string pet_id = 1 [json_name = "petId"];
inline void GetPetRequest::clear_pet_id() {
  pet_id_.ClearToEmpty();
}
inline const std::string& GetPetRequest::pet_id() const {
  // @@protoc_insertion_point(field_get:pet.v1.GetPetRequest.pet_id)
  return _internal_pet_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPetRequest::set_pet_id(ArgT0&& arg0, ArgT... args) {
 
 pet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pet.v1.GetPetRequest.pet_id)
}
inline std::string* GetPetRequest::mutable_pet_id() {
  std::string* _s = _internal_mutable_pet_id();
  // @@protoc_insertion_point(field_mutable:pet.v1.GetPetRequest.pet_id)
  return _s;
}
inline const std::string& GetPetRequest::_internal_pet_id() const {
  return pet_id_.Get();
}
inline void GetPetRequest::_internal_set_pet_id(const std::string& value) {
  
  pet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPetRequest::_internal_mutable_pet_id() {
  
  return pet_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPetRequest::release_pet_id() {
  // @@protoc_insertion_point(field_release:pet.v1.GetPetRequest.pet_id)
  return pet_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPetRequest::set_allocated_pet_id(std::string* pet_id) {
  if (pet_id != nullptr) {
    
  } else {
    
  }
  pet_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pet_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pet.v1.GetPetRequest.pet_id)
}

// -------------------------------------------------------------------

// GetPetResponse

// .pet.v1.Pet pet = 1 [json_name = "pet"];
inline bool GetPetResponse::_internal_has_pet() const {
  return this != internal_default_instance() && pet_ != nullptr;
}
inline bool GetPetResponse::has_pet() const {
  return _internal_has_pet();
}
inline void GetPetResponse::clear_pet() {
  if (GetArenaForAllocation() == nullptr && pet_ != nullptr) {
    delete pet_;
  }
  pet_ = nullptr;
}
inline const ::pet::v1::Pet& GetPetResponse::_internal_pet() const {
  const ::pet::v1::Pet* p = pet_;
  return p != nullptr ? *p : reinterpret_cast<const ::pet::v1::Pet&>(
      ::pet::v1::_Pet_default_instance_);
}
inline const ::pet::v1::Pet& GetPetResponse::pet() const {
  // @@protoc_insertion_point(field_get:pet.v1.GetPetResponse.pet)
  return _internal_pet();
}
inline void GetPetResponse::unsafe_arena_set_allocated_pet(
    ::pet::v1::Pet* pet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pet_);
  }
  pet_ = pet;
  if (pet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pet.v1.GetPetResponse.pet)
}
inline ::pet::v1::Pet* GetPetResponse::release_pet() {
  
  ::pet::v1::Pet* temp = pet_;
  pet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pet::v1::Pet* GetPetResponse::unsafe_arena_release_pet() {
  // @@protoc_insertion_point(field_release:pet.v1.GetPetResponse.pet)
  
  ::pet::v1::Pet* temp = pet_;
  pet_ = nullptr;
  return temp;
}
inline ::pet::v1::Pet* GetPetResponse::_internal_mutable_pet() {
  
  if (pet_ == nullptr) {
    auto* p = CreateMaybeMessage<::pet::v1::Pet>(GetArenaForAllocation());
    pet_ = p;
  }
  return pet_;
}
inline ::pet::v1::Pet* GetPetResponse::mutable_pet() {
  ::pet::v1::Pet* _msg = _internal_mutable_pet();
  // @@protoc_insertion_point(field_mutable:pet.v1.GetPetResponse.pet)
  return _msg;
}
inline void GetPetResponse::set_allocated_pet(::pet::v1::Pet* pet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pet_;
  }
  if (pet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pet::v1::Pet>::GetOwningArena(pet);
    if (message_arena != submessage_arena) {
      pet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pet, submessage_arena);
    }
    
  } else {
    
  }
  pet_ = pet;
  // @@protoc_insertion_point(field_set_allocated:pet.v1.GetPetResponse.pet)
}

// -------------------------------------------------------------------

// PutPetRequest

// .pet.v1.PetType pet_type = 1 [json_name = "petType"];
inline void PutPetRequest::clear_pet_type() {
  pet_type_ = 0;
}
inline ::pet::v1::PetType PutPetRequest::_internal_pet_type() const {
  return static_cast< ::pet::v1::PetType >(pet_type_);
}
inline ::pet::v1::PetType PutPetRequest::pet_type() const {
  // @@protoc_insertion_point(field_get:pet.v1.PutPetRequest.pet_type)
  return _internal_pet_type();
}
inline void PutPetRequest::_internal_set_pet_type(::pet::v1::PetType value) {
  
  pet_type_ = value;
}
inline void PutPetRequest::set_pet_type(::pet::v1::PetType value) {
  _internal_set_pet_type(value);
  // @@protoc_insertion_point(field_set:pet.v1.PutPetRequest.pet_type)
}

// string name = 2 [json_name = "name"];
inline void PutPetRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PutPetRequest::name() const {
  // @@protoc_insertion_point(field_get:pet.v1.PutPetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutPetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pet.v1.PutPetRequest.name)
}
inline std::string* PutPetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pet.v1.PutPetRequest.name)
  return _s;
}
inline const std::string& PutPetRequest::_internal_name() const {
  return name_.Get();
}
inline void PutPetRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PutPetRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PutPetRequest::release_name() {
  // @@protoc_insertion_point(field_release:pet.v1.PutPetRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PutPetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pet.v1.PutPetRequest.name)
}

// -------------------------------------------------------------------

// PutPetResponse

// .pet.v1.Pet pet = 1 [json_name = "pet"];
inline bool PutPetResponse::_internal_has_pet() const {
  return this != internal_default_instance() && pet_ != nullptr;
}
inline bool PutPetResponse::has_pet() const {
  return _internal_has_pet();
}
inline void PutPetResponse::clear_pet() {
  if (GetArenaForAllocation() == nullptr && pet_ != nullptr) {
    delete pet_;
  }
  pet_ = nullptr;
}
inline const ::pet::v1::Pet& PutPetResponse::_internal_pet() const {
  const ::pet::v1::Pet* p = pet_;
  return p != nullptr ? *p : reinterpret_cast<const ::pet::v1::Pet&>(
      ::pet::v1::_Pet_default_instance_);
}
inline const ::pet::v1::Pet& PutPetResponse::pet() const {
  // @@protoc_insertion_point(field_get:pet.v1.PutPetResponse.pet)
  return _internal_pet();
}
inline void PutPetResponse::unsafe_arena_set_allocated_pet(
    ::pet::v1::Pet* pet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pet_);
  }
  pet_ = pet;
  if (pet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pet.v1.PutPetResponse.pet)
}
inline ::pet::v1::Pet* PutPetResponse::release_pet() {
  
  ::pet::v1::Pet* temp = pet_;
  pet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pet::v1::Pet* PutPetResponse::unsafe_arena_release_pet() {
  // @@protoc_insertion_point(field_release:pet.v1.PutPetResponse.pet)
  
  ::pet::v1::Pet* temp = pet_;
  pet_ = nullptr;
  return temp;
}
inline ::pet::v1::Pet* PutPetResponse::_internal_mutable_pet() {
  
  if (pet_ == nullptr) {
    auto* p = CreateMaybeMessage<::pet::v1::Pet>(GetArenaForAllocation());
    pet_ = p;
  }
  return pet_;
}
inline ::pet::v1::Pet* PutPetResponse::mutable_pet() {
  ::pet::v1::Pet* _msg = _internal_mutable_pet();
  // @@protoc_insertion_point(field_mutable:pet.v1.PutPetResponse.pet)
  return _msg;
}
inline void PutPetResponse::set_allocated_pet(::pet::v1::Pet* pet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pet_;
  }
  if (pet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pet::v1::Pet>::GetOwningArena(pet);
    if (message_arena != submessage_arena) {
      pet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pet, submessage_arena);
    }
    
  } else {
    
  }
  pet_ = pet;
  // @@protoc_insertion_point(field_set_allocated:pet.v1.PutPetResponse.pet)
}

// -------------------------------------------------------------------

// DeletePetRequest

// string pet_id = 1 [json_name = "petId"];
inline void DeletePetRequest::clear_pet_id() {
  pet_id_.ClearToEmpty();
}
inline const std::string& DeletePetRequest::pet_id() const {
  // @@protoc_insertion_point(field_get:pet.v1.DeletePetRequest.pet_id)
  return _internal_pet_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePetRequest::set_pet_id(ArgT0&& arg0, ArgT... args) {
 
 pet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pet.v1.DeletePetRequest.pet_id)
}
inline std::string* DeletePetRequest::mutable_pet_id() {
  std::string* _s = _internal_mutable_pet_id();
  // @@protoc_insertion_point(field_mutable:pet.v1.DeletePetRequest.pet_id)
  return _s;
}
inline const std::string& DeletePetRequest::_internal_pet_id() const {
  return pet_id_.Get();
}
inline void DeletePetRequest::_internal_set_pet_id(const std::string& value) {
  
  pet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeletePetRequest::_internal_mutable_pet_id() {
  
  return pet_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeletePetRequest::release_pet_id() {
  // @@protoc_insertion_point(field_release:pet.v1.DeletePetRequest.pet_id)
  return pet_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeletePetRequest::set_allocated_pet_id(std::string* pet_id) {
  if (pet_id != nullptr) {
    
  } else {
    
  }
  pet_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pet_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pet.v1.DeletePetRequest.pet_id)
}

// -------------------------------------------------------------------

// DeletePetResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace pet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pet::v1::PetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pet::v1::PetType>() {
  return ::pet::v1::PetType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pet_2fv1_2fpet_2eproto
